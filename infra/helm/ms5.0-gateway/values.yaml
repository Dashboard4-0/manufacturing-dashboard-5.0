replicaCount: 3

image:
  repository: ms5/gateway
  pullPolicy: IfNotPresent
  tag: "1.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  allowPrivilegeEscalation: false

service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations: {}

ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
  hosts:
    - host: api.ms5.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: ms5-gateway-tls
      hosts:
        - api.ms5.example.com

resources:
  limits:
    cpu: 1000m
    memory: 1024Mi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - ms5-gateway
          topologyKey: kubernetes.io/hostname

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

podDisruptionBudget:
  enabled: true
  minAvailable: 1

env:
  NODE_ENV: production
  PORT: "3000"
  SERVICE_NAME: ms5-gateway

envFrom:
  - secretRef:
      name: ms5-gateway-secrets
  - configMapRef:
      name: ms5-gateway-config

configMap:
  OIDC_ISSUER: "https://login.microsoftonline.com/tenant-id/v2.0"
  KAFKA_BROKERS: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
  REDIS_URL: "redis://redis-master:6379"
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4318"
  LOG_LEVEL: "info"
  CORS_ORIGINS: "https://app.ms5.example.com"
  RATE_LIMIT_MAX: "100"
  RATE_LIMIT_WINDOW: "60000"

secrets:
  DATABASE_URL: ""
  JWT_SECRET: ""
  OIDC_CLIENT_ID: ""
  OIDC_CLIENT_SECRET: ""
  VAULT_TOKEN: ""

volumeMounts:
  - name: tmp
    mountPath: /tmp
    readOnly: false

volumes:
  - name: tmp
    emptyDir: {}

networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: ms5
      ports:
        - protocol: TCP
          port: 3001
        - protocol: TCP
          port: 3002
        - protocol: TCP
          port: 3003
    - to:
        - namespaceSelector:
            matchLabels:
              name: kafka
      ports:
        - protocol: TCP
          port: 9092
    - to:
        - namespaceSelector:
            matchLabels:
              name: redis
      ports:
        - protocol: TCP
          port: 6379

serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
